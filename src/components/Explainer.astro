---
import { ImageMetadata } from "astro";
import Heading from "./Heading.astro";
import BodyText from "./BodyText.astro";
import { Image } from "astro:assets";
import Button from "./Button.astro";

export interface ExplainerAction {
	href: string;
	text: string;
}

export interface ExplainerImageData {
	alt: string;
	src: ImageMetadata;
}

export interface ExplainerPhotos {
	primary: ExplainerImageData;
	secondary: [ExplainerImageData, ExplainerImageData];
}

export interface ExplainerData {
	action?: ExplainerAction;
	body: string;
	direction: "down" | "up";
	heading: string;
	photos: ExplainerPhotos;
}

export type Props = ExplainerData;

function computeImageSizes(
	{ height, width }: { height: number; width: number },
	bound: number,
): { height: string; width: string } {
	if (height < width) {
		const opposite = computeImageSizes({ height: width, width: height }, bound);
		return { height: opposite.width, width: opposite.height };
	}

	return {
		height: `${bound}rem`,
		width: (width * bound) / height + "rem",
	};
}
---

<div class={`explainer-${Astro.props.direction}`}>
	<Heading level="h2">{Astro.props.heading}</Heading>
	<div class="explainer-images">
		<Image
			class="explainer-image-primary"
			layout="responsive"
			{...Astro.props.photos.primary}
		/>
		{
			Astro.props.photos.secondary.map((secondary, i) => (
				<Image
					class="explainer-image-secondary"
					{...secondary}
					style={computeImageSizes(secondary.src, 16 - i * 4)}
				/>
			))
		}
	</div>
	<BodyText class="explainer-body">{Astro.props.body}</BodyText>
	{
		Astro.props.action && (
			<div class="explainer-action-area">
				<Button
					as="a"
					href={Astro.props.action.href}
					size="large"
					variant="accent"
				>
					{Astro.props.action.text}
				</Button>
			</div>
		)
	}
</div>

<style>
	h2 {
		color: var(--colorAccentLight);
		font-size: var(--fontSizeHero);
		font-weight: var(--fontWeightSemibold);
		padding: 3.5rem 2rem 2rem;
		text-align: center;
	}

	.explainer-images {
		--offsetHorizontal: 2rem;
		--offsetVertical: 1rem;
		margin: auto;
		position: relative;
		user-select: none;
	}

	.explainer-image-primary {
		width: 100%;
	}

	.explainer-image-secondary {
		display: none;
	}

	.explainer-body {
		font-family: var(--fontFamilyBody);
		font-size: var(--fontSizeMedium);
		font-weight: var(--fontWeightMedium);
		letter-spacing: var(--letterSpacingLoose);
		line-height: 1.35;
		margin: 2rem auto;
		max-width: var(--sizeContentAreaEmphasized);
		text-align: center;
	}

	.explainer-action-area {
		display: flex;
		justify-content: center;
		width: 100%;
	}

	@media (width >= 1017px) {
		.explainer-images {
			width: calc(var(--sizeContentAreaThin) - 2 * var(--offsetHorizontal));
		}
		.explainer-image-primary {
			display: block;
			height: 22.5rem;
			margin: auto;
			width: 41.25rem;
		}

		.explainer-image-secondary {
			display: initial;
			position: absolute;
		}

		.explainer-down .explainer-images .explainer-image-secondary:nth-child(2),
		.explainer-up .explainer-images .explainer-image-secondary:nth-child(2) {
			left: calc(var(--offsetHorizontal) * -1);
		}

		.explainer-down .explainer-images .explainer-image-secondary:nth-child(3),
		.explainer-up .explainer-images .explainer-image-secondary:nth-child(3) {
			right: calc(var(--offsetHorizontal) * -1);
		}

		.explainer-down .explainer-images .explainer-image-secondary:nth-child(2),
		.explainer-up .explainer-images .explainer-image-secondary:nth-child(3) {
			top: calc(var(--offsetVertical) * -1);
		}

		.explainer-down .explainer-images .explainer-image-secondary:nth-child(3),
		.explainer-up .explainer-images .explainer-image-secondary:nth-child(2) {
			bottom: calc(var(--offsetVertical) * -1);
		}
	}
</style>
