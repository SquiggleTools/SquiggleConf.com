---
import HeadingFlanked from "./HeadingFlanked.astro";
import NewsletterForm, {
	Props as NewsletterFormProps,
} from "./NewsletterForm.astro";

type Props = NewsletterFormProps;
---

<div>
	<HeadingFlanked id="newsletter">Newsletter</HeadingFlanked>

	<NewsletterForm {...Astro.props} />
</div>

<script>
	const form = document.getElementById("newsletter-form") as HTMLFormElement;

	function setMessage(text: string, status: "happy" | "unhappy") {
		const messageDiv = document.getElementById(
			"newsletter-message",
		) as HTMLDivElement;

		messageDiv.textContent = text;

		if (status === "unhappy") {
			messageDiv.classList.add("unhappy");
		} else {
			messageDiv.classList.remove("unhappy");
		}
	}

	form.addEventListener("submit", (event) => {
		event.preventDefault();

		const submitButton = form.querySelector("button") as HTMLButtonElement;
		submitButton.disabled = true;

		const emailInput = form.querySelector("input") as HTMLInputElement;
		const email = emailInput.value;

		const formBody = "userGroup=&email=" + encodeURIComponent(email);
		fetch(form.action, {
			method: "POST",
			body: formBody,
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
			},
		})
			.then((response) => [response.ok, response.json(), response] as const)
			.then(([ok, dataPromise, response]) => {
				dataPromise.then((data) => {
					if (ok) {
						setMessage("Thanks for signing up!", "happy");
						form.reset();
						return;
					}

					setMessage(
						`There was an issue: ${data || response.statusText}`,
						"unhappy",
					);
				});
			})
			.catch((error) => {
				setMessage(
					error.message === "Failed to fetch"
						? "Too many requests. Try again later, please?"
						: error.message,
					"unhappy",
				);
			})
			.finally(() => {
				submitButton.disabled = false;
			});
	});
</script>

<style>
	#newsletter-message {
		margin: 1rem auto 0;
		text-align: center;
	}

	#newsletter-message.unhappy {
		color: var(--colorUnhappy);
	}
</style>
