---
import { HTMLTag, Polymorphic } from "astro/types";

type Props<Tag extends HTMLTag> = Polymorphic<{
	as: Tag;
	class?: string;
	size?: "normal" | "large";
	variant: "accent" | "emphasized" | "light";
}>;

const {
	as: As,
	class: className,
	size = "normal",
	variant,
	...rest
} = Astro.props;
---

<As
	class:list={[
		"button",
		`button-size-${size}`,
		`button-variant-${variant}`,
		className,
	]}
	{...rest}
>
	<slot />
</As>

<style>
	.button {
		align-items: center;
		border: 2px solid transparent;
		cursor: pointer;
		display: inline-flex;
		font-family: var(--fontFamilyHeading);
		font-weight: var(--fontWeightSemibold);
		text-align: center;
		text-decoration: none;
	}

	.button[disabled] {
		opacity: 0.8;
		cursor: not-allowed;
	}

	.button-size-normal {
		border-radius: 2rem;
		padding: 0.65rem 1.25rem;
	}

	.button-size-large {
		border-radius: 4rem;
		font-size: var(--fontSizeMedium);
		padding: 0.85rem 2rem 0.75rem;
	}

	.button-variant-accent {
		background: var(--colorBlue3);
		color: var(--colorWhiteIsh);
	}

	.button-variant-emphasized {
		background: var(--colorAccentMedium);
		color: var(--colorForegroundAccent);
	}

	.button-variant-light {
		background: var(--colorWhiteIsh);
		border: 2px solid var(--colorBlue1);
		color: var(--colorBlackIsh);
		font-weight: var(--fontWeightBold);
	}

	.button:active {
		background: var(--colorAccentSecond);
		color: var(--colorForeground);
	}

	.button:focus:not(:active, [disabled]),
	.button:hover:not(:active, [disabled]) {
		background: var(--colorForeground);
		color: var(--colorBackground);
		border: 2px solid var(--colorForegroundAccent);
	}
</style>
